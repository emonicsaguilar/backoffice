{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst host = environment.host;\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('session')));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n\n    login(identifier, password) {\n      return this.http.post(`${host}/auth/local`, {\n        identifier,\n        password\n      }).pipe(map(response => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        localStorage.setItem('session', JSON.stringify(response));\n        this.currentUserSubject.next(response);\n        return response;\n      }));\n    }\n\n    logout() {\n      // remove user from local storage and set current user to null\n      localStorage.removeItem('session');\n      this.currentUserSubject.next(null);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}